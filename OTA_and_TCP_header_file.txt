#include <WiFi.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>

const char* host = "192.168.223.20";//get ip sddres from wifi settings of your Laptop
const uint16_t port = 12645;

WiFiClient client;

const char* ssid = "SSID";
const char* password = "PASSWORD";

void connectWiFiAndTCP() {
  unsigned long startAttemptTime = millis();
  
  // Try to connect to WiFi for up to 5 seconds
  // while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 3000) {
  //   WiFi.begin(ssid, password);
  //   Serial.print(".");
  //   delay(2000);
  //   ESP.restart();  
  //   }
  
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Failed to connect to WiFi within the time limit.");
  } else {
    Serial.println("Connected to WiFi.");
  }

  // Try to connect to the TCP server for the remaining time
  startAttemptTime = millis(); // Reset start time for TCP connection
  
  while (!client.connect(host, port) && millis() - startAttemptTime < 2000) {
    Serial.println("Connecting TCP to server...");
    delay(500);
  }

  if (!client.connected()) {
    Serial.println("Failed to connect to server within the time limit.");
  } else {
    Serial.println("Connected to server.");
  }
}


void Ota_and_TCP_init() {
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(1000);
    ESP.restart();
  }

  // Port defaults to 3232
  ArduinoOTA.setPort(3232);
  ArduinoOTA.setHostname("myesp32");
  ArduinoOTA.setPassword("admin");

  ArduinoOTA
    .onStart([]() {
      String type;
      if (ArduinoOTA.getCommand() == U_FLASH)
        type = "sketch";
      else  // U_SPIFFS
        type = "filesystem";
      Serial.println("Start updating " + type);
    })
    .onEnd([]() {
      Serial.println("\nEnd");
    })
    .onProgress([](unsigned int progress, unsigned int total) {
      Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    })
    .onError([](ota_error_t error) {
      Serial.printf("Error[%u]: ", error);
      if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
      else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
      else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
      else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
      else if (error == OTA_END_ERROR) Serial.println("End Failed");
    });

  ArduinoOTA.begin();

  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  connectWiFiAndTCP();
}

void TCP_init(){
    while (!client.connect(host, port)) {
    delay(500);
    Serial.println("Connecting to server...");
  }
}

void TCP_Write(int i){
    if (client.connected()) {
      client.print(i); 
    }else{
      TCP_init();
    }
}

    // client.print("Hello\n"); 
void check_TCP() {
  if (client.connected()) {
    unsigned long startTime = micros(); // Record start time in microseconds
    client.print("Hello\n"); // Send minimal data
    unsigned long endTime = micros(); // Record end time

    unsigned long duration = endTime - startTime; // Calculate duration
    Serial.print("Data sent: Hello. Time taken: ");
    Serial.print(duration);
    client.println(duration); // Send minimal data

    Serial.println(" Âµs"); // Print duration in microseconds
  } else {
    Serial.println("Client not connected");
  }
  delay(1000); // Send data every second
}

